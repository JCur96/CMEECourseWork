Starting weekly assessment for Jake, Week1

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 48.03 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week6, Week1, Week7, Assessment, Week5, Week2, Week4, .git, Week3, Project, HPC_week, MiniPorject

Found the following files in parent directory: README.txt, .gitignore

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:
**********************************************************************
# .gitignore containing python and LaTeX templates, plus my own rules

# Python template for .gitignore

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# celery beat schedule file
celerybeat-schedule

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# LaTeX template

## Core latex/pdflatex auxiliary files:
*.aux
*.lof
*.log
*.lot
*.fls
*.out
*.toc
*.fmt
*.fot
*.cb
*.cb2
.*.lb

## Intermediate documents:
*.dvi
*.xdv
*-converted-to.*
# these rules might exclude image files for figures etc.
# *.ps
# *.eps
# *.pdf

## Generated if empty string is given at "Please type another file name for output:"
.pdf

## Bibliography auxiliary files (bibtex/biblatex/biber):
*.bbl
*.bcf
*.blg
*-blx.aux
*-blx.bib
*.run.xml

## Build tool auxiliary files:
*.fdb_latexmk
*.synctex
*.synctex(busy)
*.synctex.gz
*.synctex.gz(busy)
*.pdfsync

## Build tool directories for auxiliary files
# latexrun
latex.out/

## Auxiliary and intermediate files from other packages:
# algorithms
*.alg
*.loa

# achemso
acs-*.bib

# amsthm
*.thm

# beamer
*.nav
*.pre
*.snm
*.vrb

# changes
*.soc

# comment
*.cut

# cprotect
*.cpt

# elsarticle (documentclass of Elsevier journals)
*.spl

# endnotes
*.ent

# fixme
*.lox

# feynmf/feynmp
*.mf
*.mp
*.t[1-9]
*.t[1-9][0-9]
*.tfm

#(r)(e)ledmac/(r)(e)ledpar
*.end
*.?end
*.[1-9]
*.[1-9][0-9]
*.[1-9][0-9][0-9]
*.[1-9]R
*.[1-9][0-9]R
*.[1-9][0-9][0-9]R
*.eledsec[1-9]
*.eledsec[1-9]R
*.eledsec[1-9][0-9]
*.eledsec[1-9][0-9]R
*.eledsec[1-9][0-9][0-9]
*.eledsec[1-9][0-9][0-9]R

# glossaries
*.acn
*.acr
*.glg
*.glo
*.gls
*.glsdefs

# gnuplottex
*-gnuplottex-*

# gregoriotex
*.gaux
*.gtex

# htlatex
*.4ct
*.4tc
*.idv
*.lg
*.trc
*.xref

# hyperref
*.brf

# knitr
*-concordance.tex
# TODO Comment the next line if you want to keep your tikz graphics files
*.tikz
*-tikzDictionary

# listings
*.lol

# makeidx
*.idx
*.ilg
*.ind
*.ist

# minitoc
*.maf
*.mlf
*.mlt
*.mtc[0-9]*
*.slf[0-9]*
*.slt[0-9]*
*.stc[0-9]*

# minted
_minted*
*.pyg

# morewrites
*.mw

# nomencl
*.nlg
*.nlo
*.nls

# pax
*.pax

# pdfpcnotes
*.pdfpc

# sagetex
*.sagetex.sage
*.sagetex.py
*.sagetex.scmd

# scrwfile
*.wrt

# sympy
*.sout
*.sympy
sympy-plots-for-*.tex/

# pdfcomment
*.upa
*.upb

# pythontex
*.pytxcode
pythontex-files-*/

# tcolorbox
*.listing

# thmtools
*.loe

# TikZ & PGF
*.dpth
*.md5
*.auxlock

# todonotes
*.tdo

# easy-todo
*.lod

# xcolor
*.xcp

# xmpincl
*.xmpi

# xindy
*.xdy

# xypic precompiled matrices
*.xyc

# endfloat
*.ttt
*.fff

# Latexian
TSWLatexianTemp*

## Editors:
# WinEdt
*.bak
*.sav

# Texpad
.texpadtmp

# LyX
*.lyx~

# Kile
*.backup

# KBibTeX
*~[0-9]*

# auto folder when using emacs and auctex
./auto/*
*.el

# expex forward references with \gathertags
*-tags.tex

# standalone packages
*.sta

# R gitignore

# History files
.Rhistory
.Rapp.history

# Session Data files
.RData

# Example code in package build process
*-Ex.R

# Output files from R CMD build
/*.tar.gz

# Output files from R CMD check
/*.Rcheck/

# RStudio files
.Rproj.user/

# produced vignettes
vignettes/*.html
vignettes/*.pdf

# OAuth2 token, see https://github.com/hadley/httr/releases/tag/v0.3
.httr-oauth

# knitr and R markdown default cache directories
/*_cache/
/cache/

# Temporary files created by R markdown
*.utf8.md
*.knit.md

# Shiny token, see https://shiny.rstudio.com/articles/shinyapps.html
rsconnect/


# Anything extra I've thought of

*~
*.tmp
find . -size +100M | cat


**********************************************************************

Found README in parent directory, named: README.txt

Printing contents of README.txt:
**********************************************************************
My CMEE Coursework Repository

Getting Started 
All work has been conducted in Ubuntu 18.04.1 LTS (Bionic Beaver). 

Intro - 
Computational Methods in Ecology and Evolution (or CMEE) is a one year masters course, this repository is the coursework generated as part of that masters. 
Each week is split into a seperate directory, labelled as such (e.g. Week1), which is in turn split into four sub directories (Code, Data, Output and Sandbox). The titles for each are fairly self explanatory, with Code containing any code written (be it scripts, bash commands or otherwise), Data contains raw data, Output containing any relevant outputs that want to be saved, and Sandbox is a place for playing with new code and files. 

Why the Git? 
This git is used to push each weeks work to by 5pm Wednesday of the following week for marking. 

Author: Jake Curry, j.curry18@imperial.ac.uk 
**********************************************************************

======================================================================
Looking for the weekly directories...

Found 8 weekly directories: HPC_week, Week1, Week2, Week3, Week4, Week5, Week6, Week7

The Week1 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK1...

Found the following directories: Code, Data, Sandbox, Results

Found the following files: readme.txt

Checking for readme file in weekly directory...

Found README in parent directory, named: readme.txt

Printing contents of readme.txt:
**********************************************************************
# Week 1 readme
# Date: 1-7th Oct 2018
# This directory contains content on the basics of bash commands, scripting 
# use of LaTeX and git
# Week 1 is made up of four directories, Code, Data, Results and Sandbox
# Code contains scripts and bash code, 
# Data is raw data that is used by the scripts and 
# Sandbox contains test files for playing around in the terminal. 
# 
# Scripts + their functions: 
# CompileLaTeX.sh - compiles LaTeX documents including bibliography. Removes extraneous files 
# tab t	generated during this process.
# ConcatenateTwoFiles.sh - takes two files and merges (concatenates) them into one new file 
# CountLines.sh - a shell script which counts the number of lines in a file and prints that number
# MyExampleScript.sh - prints the words Hello 'USER' (where user is replaced by the current user)
#	its a basic example script 	
# UnixPract1.txt - Week1 practical, containing single line solutions to the problems posed at the
# 	end of the Unix notebook
# boilerplate.sh - a basic boilerplate script for bash
# csvtospace.sh - converts comma delimited files to space delimited files
# tabtocsv.sh - converts tab delimited filed to comma delimited files 
# tiff2png.sh - convert .png files to .jpeg files
# variables.sh
#
#FirstBiblio.blb -- 
# FirstExample.bbl -- 
# FirstExample.blg ----- Output from running CompileLaTeX.sh on the FirstExample.tex file, with
# 	an imported bibliography (FirstBiblio.blb).  
# FirstExample.pdf -- 
# FirstExample.tex-- 
#
# Data: This weeks data include the species lists from the IUCN redlist (under spawannxs.txt), temperature data in csv and processed txt formats (1800.csv, 1801.csv, 1802,csv, 1803.csv + the same filenames with a .txt extension), and genomic data in fasta file format (E.coli.fasta, 407228326.fasta, 407228412.fasta). 
# 
# Results: 
# When results are generated they go here
# 
#
# Sandbox: 
# TestFind - a folder containing multiple directories and files (blank but with different 
# 	extensions) to play with the find command
# TestWild - a folder containing multiple files with different extensions and wildcard c
# 	characters to play with using the wilfcard search functions
# ListRootDir - a file created when playing with the redirection functions
# Sandbox - a file containing the IUCN Red list species data
# test.txt - a file used to test out tab to csv
# test.txt.csv - the result of tab to csv
**********************************************************************

Found following files in results directory: README.txt...

Found 10 code files: ConcatenateTwoFiles.sh, UnixPract1.txt, CountLines.sh, variables.sh, CompileLaTeX.sh, tiff2png.sh, csvtospace.sh, MyExampleScript.sh, tabtocsv.sh, boilerplate.sh

======================================================================
Testing script/code files...

======================================================================
Inspecting script file ConcatenateTwoFiles.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Jake Curry j.curry18@imperial.ac.uk
# Script: ConcatenateTwoFiles.sh
# Desc: Script that takes two files and merges their content in one new file
# Arguments: 3, files in place of $1 $2 $3, with $3 being the destination file created by this script (but named at input)
# Date: Oct 2018
cat $1 > $3 # cat reads the contents of file $1, converts them to a standard output and places them in file $3. 
# file $3 is a file you name and create as part of the input for the script
cat $2 >> $3 # file $2 is read and output into file $3 
echo "Merged File is" # returns the contents of the merged file
cat $3 
mv $3 ../Results/ # moving the product to the results dir
exit**********************************************************************

Testing ConcatenateTwoFiles.sh...

Output (only first 500 characters): 

**********************************************************************
Merged File is

**********************************************************************

Encountered error:
ConcatenateTwoFiles.sh: line 7: $3: ambiguous redirect
ConcatenateTwoFiles.sh: line 9: $3: ambiguous redirect
mv: missing destination file operand after '../Results/'
Try 'mv --help' for more information.

======================================================================
Inspecting script file UnixPract1.txt...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Jake Curry j.curry18@imperial.ac.uk
# Desc: Unix Commands, covering finding and counting in numerous files
# Arguments: vary for each command
# Date: Oct 2018
# 
wc -l ../Data/407228326.fasta &&  wc -l ../Data/407228412.fasta &&  wc -l ../Data/E.coli.fasta  #1
# - counting file lines 'wc' is the word counting command, '-l' 
# specifies that we are counting lines. && is just adding commands to the string
#
grep -v '>' ../Data/E.coli.fasta #2
# printing everything after the
# second line for the E. coli genome. grep is a pattern matching command 
# that by default prints output, in this case after matching all lines 
# beginning '>' (-v is the inverse function i.e. grep finds 
# all lines that do not match the specified pattern) 
#
tail -n +2 ../Data/E.coli.fasta | tr -d '[:space:]'  | wc -m  #3 
# tail displays last lines of a file -n modifies to start at 
# a particular point, in this case the second line of the file (+2)
# tr -d is deletion of all '[:spaces:]', 
# wc, word count, specifying characters are to be counted (-m)
# 
tail -n +2 ../Data/E.coli.fasta | tr -d '\n' | grep -o 'ATGC' | wc -l #4
# tail is used to start from the second line down (so excludes the header
# from all further commands) 
# commands are piped (|) together to allow them to happen in sequence on one
# line
# tr -d deletes all the ('\n') new line characters
# grep -o finds all the parts of the now single line that match the sequence
# and outputs all of these on new single lines 
# wc -l counts the number of these new lines
#
echo $(tail -n +2 ../Data/E.coli.fasta | tr -d '\n' | grep -o [A,T] | wc -l) /  $(tail -n +2 ../Data/E.coli.fasta | tr -d '\n' | grep -o [G,C] | wc -l) | bc -l #5
# echo - prints the end result of the equation, in this case a ratio displayed as a decimal
# tail allows us to start at the second line, which means we ignore this files header
# tr - translates (in this case removes) the new line special characters
# grep -o finds all the matching characters and places them on new lines 
# wc - l counts these new lines 
# the '/' in the middle denotes dividing one equation by the other
# bc is an arbitrary precision calculator -l loads mathlib which is a standard math library, allowing interpretation of the backslash as a division symbol
# 
**********************************************************************

Testing UnixPract1.txt...

======================================================================
Inspecting script file CountLines.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Jake Curry j.curry18@imperial.ac.uk
# Script: CountLines.sh 
# Desc: Counts the number of lines in a specified file
# Arguments: 1, $1 is a file which must be specified at input
# Date: Oct 2018
NumLines=`wc -l < $1` # -l specifies that lines will be counted by the function wc
echo "The file $1 has $NumLines lines" # $NumLines is a placeholder for the actual number of lines counted by the script
echo
**********************************************************************

Testing CountLines.sh...

Output (only first 500 characters): 

**********************************************************************
The file  has  lines


**********************************************************************

Encountered error:
CountLines.sh: line 7: $1: ambiguous redirect

======================================================================
Inspecting script file variables.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Jake Curry j.curry18@imperial.ac.uk
# Script: variables.sh
# Desc: shows how variables can be assinged and used in Unix via shell script
# Date: Oct 2018
MyVar='some string'
echo 'the current value of the variable is' $MyVar
echo 'Please enter a new string'
read MyVar
echo 'the current value of the variable is' $MyVar
## Reading multiple values
echo 'Enter two numbers seperated by space(s)'
read a b 
echo 'you entered' $a 'and' $b '. Their sum is:'
mysum=`expr $a + $b`
echo $mysum

**********************************************************************

Testing variables.sh...

Output (only first 500 characters): 

**********************************************************************
the current value of the variable is some string
Please enter a new string
the current value of the variable is
Enter two numbers seperated by space(s)
you entered and . Their sum is:


**********************************************************************

Encountered error:
expr: syntax error

======================================================================
Inspecting script file CompileLaTeX.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Jake Curry j.curry18@imperial.ac.uk
# Script: CompileLaTeX.sh
# Desc: Compiles LaTeX documents and cleans up extraneous files from
# the compilation
# Arguments: 1 -> .tex file
# Date: Oct 2018
pdflatex $1.tex # command that compiles pdf from .tex files
bibtex $1 # adds a bibliography to the pdf file 
pdflatex $1.tex # compiles the completed document
pdflatex $1.tex
echo "Compiled! Opening document for you to view" # just something to
# say its done it's thing
evince ../Results/$1.pdf & # GNOME document viewer - opens the compiled pdf in
# a document viewer when done
mv $1.pdf ../Results/ # moving the product to the results dir
## Cleanup of extraneous files
# * means all of 
# .$ specifies the file extensions to be removed
# 
rm *~
rm *.aux
rm *.dvi
rm *.log
rm *.nav
rm *.out
rm *.snm
rm *.toc
**********************************************************************

Testing CompileLaTeX.sh...

Output (only first 500 characters): 

**********************************************************************
This is pdfTeX, Version 3.14159265-2.6-1.40.16 (TeX Live 2015/Debian) (preloaded format=pdflatex)
 restricted \write18 enabled.
entering extended mode
(/usr/share/texlive/texmf-dist/tex/latex/tools/.tex
LaTeX2e <2016/02/01>
Babel <3.9q> and hyphenation patterns for 81 language(s) loaded.
File ignored)
*
! Emergency stop.
<*> .tex
        
!  ==> Fatal error occurred, no output PDF file produced!
Transcript written on .log.
This is pdfTeX, Version 3.14159265-2.6-1.40.16 (TeX Live 2015/Debian) (pre
**********************************************************************

Encountered error:
bibtex: Need exactly one file argument.
Try `bibtex --help' for more information.
mv: cannot stat '.pdf': No such file or directory
rm: cannot remove '*~': No such file or directory
rm: cannot remove '*.aux': No such file or directory
rm: cannot remove '*.dvi': No such file or directory
rm: cannot remove '*.log': No such file or directory
rm: cannot remove '*.nav': No such file or directory
rm: cannot remove '*.out': No such file or directory
rm: cannot remove '*.snm': No such file or directory
rm: cannot remove '*.toc': No such file or directory

** (evince:11442): WARNING **: Error when getting information for file '/home/mhasoba/Documents/Teaching/IC_CMEE/2018-19/Coursework/StudentRepos/JakeCurry_JC518/Week1/Results/.pdf': No such file or directory

** (evince:11442): WARNING **: Error setting file metadata: No such file or directory

** (evince:11442): WARNING **: Error setting file metadata: No such file or directory

** (evince:11442): WARNING **: Error setting file metadata: No such file or directory

** (evince:11442): WARNING **: Error setting file metadata: No such file or directory

** (evince:11442): WARNING **: Error setting file metadata: No such file or directory

** (evince:11442): WARNING **: Error setting file metadata: No such file or directory

** (evince:11442): WARNING **: Error setting file metadata: No such file or directory

** (evince:11442): WARNING **: Error setting file metadata: No such file or directory

** (evince:11442): WARNING **: Error setting file metadata: No such file or directory

** (evince:11442): WARNING **: Error setting file metadata: No such file or directory

** (evince:11442): WARNING **: Error setting file metadata: No such file or directory

======================================================================
Inspecting script file tiff2png.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Jake Curry j.curry18@imperial.ac.uk
# Script: tiff2png.sh
# Desc: converts .tif files to .png files
# Arguments: 1 -> $f is a file name
# Date: Oct 2018
for f in *.tif; # this is a for loop - basic programming method of running 
	# through a set of commands
	do
		echo "Converting $f"; # prints whats in quotation marks 
		#for you to see 
		convert "$f" "$(basename "$f" .tif).png"; # converts the file
		# type whislt retaining the name
		mv *.png ../Results/ # moving the product to the results dir
	done # ends the loop

**********************************************************************

Testing tiff2png.sh...

Output (only first 500 characters): 

**********************************************************************
Converting *.tif

**********************************************************************

Encountered error:
convert: unable to open image `*.tif': No such file or directory @ error/blob.c/OpenBlob/2712.
convert: no images defined `*.png' @ error/convert.c/ConvertImageCommand/3210.
mv: cannot stat '*.png': No such file or directory

======================================================================
Inspecting script file csvtospace.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Jake Curry j.curry18@imperial.ac.uk
# Script: csvtospace.sh 
# Desc: substitue the commas in a file for spaces 
# Saves the output to a .txt file
# Arguments: 1-> space delimited file
# Date: Oct 2018
echo "Creating a space delimited version of $1..." 
cat $1 | tr -s "," " " >>$1.txt | mv $1.txt ../Results/ #cat function reads file $1, mv, moving the product to the results dir
# tr translates the specified characters,
# -s specifies replacement >>$1.txt sends the 
# output to a .txt file version of file $1 
echo "Done!" 
exit

**********************************************************************

Testing csvtospace.sh...

Output (only first 500 characters): 

**********************************************************************
Creating a space delimited version of ...
Done!

**********************************************************************

Code ran without errors

Time consumed = 0.01035s

======================================================================
Inspecting script file MyExampleScript.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Jake Curry j.curry18@imperial.ac.uk
# Script: MyExampleScript.sh
# Desc: Prints the words 'Hello $USER' on execution
# Arguments: None
# Date: Oct 2018
msg1="Hello"
msg2=$USER # $USER is a placeholder for the computers current user
echo "$msg1 $msg2"
echo "Hello $USER"
echo

**********************************************************************

Testing MyExampleScript.sh...

Output (only first 500 characters): 

**********************************************************************
Hello mhasoba
Hello mhasoba


**********************************************************************

Code ran without errors

Time consumed = 0.00523s

======================================================================
Inspecting script file tabtocsv.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Jake Curry j.curry18@imperial.ac.uk
# Script: tabtocsv.sh
# Desc: substitute the tabs in a file for commas
# saves the output to a .csv file
# Arguments: 1-> tab delimited file
# Date: Oct 2018
echo "Creating a comma delimited version of $1..."
cat $1 | tr -s "\t" "," >> $1.csv | mv $1.csv ../Results/ # tr -s translates characters, specifying replacement, mv, moving the product to the results dir
echo "Done!"
exit

**********************************************************************

Testing tabtocsv.sh...

Output (only first 500 characters): 

**********************************************************************
Creating a comma delimited version of ...
Done!

**********************************************************************

Code ran without errors

Time consumed = 0.01119s

======================================================================
Inspecting script file boilerplate.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Jake Curry j.curry18@imperial.ac.uk
# Script: boilerplate.sh
# Desc: simple boilerplate for shell scripts
# Arguments: none
# Date: Oct 2018

echo -e "\nThis is a shell script! \n" # -e enables interpretation of backslash escapes
# by the function 'echo'

exit
**********************************************************************

Testing boilerplate.sh...

Output (only first 500 characters): 

**********************************************************************

This is a shell script! 


**********************************************************************

Code ran without errors

Time consumed = 0.00571s

======================================================================
======================================================================
Finished running scripts

Ran into 5 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 100

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!